creating dictionary for stylesheet
reusing dictionary from cern_marc21.xsl for stylesheet
xsltParseStylesheetProcess : found stylesheet
exclude result prefix xs
exclude result prefix xsi
exclude result prefix xsl
exclude result prefix oai
exclude result prefix marc
xsltPrecomputeStylesheet: removing ignorable blank node
Registering global param global_group
Defining global param global_group
Registering global param originatingSource
Defining global param originatingSource
template has 1 inherited namespaces
xsltCompilePattern : parsing '@*'
xsltCompilePattern : parsed @*, default priority -0.500000
xsltCompilePattern : parsing 'node()'
xsltCompilePattern : parsed node(), default priority -0.500000
added pattern : '@*' priority -0.500000
added pattern : 'node()' priority -0.500000
template has 1 inherited namespaces
xsltCompilePattern : parsing 'oai:record'
xsltCompilePattern : parsed oai:record, default priority 0.000000
added pattern : 'oai:record' priority 0.000000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode identifier_doi
xsltCompilePattern : parsing 'node()'
xsltCompilePattern : parsed node(), default priority -0.500000
added pattern : 'node()' mode 'identifier_doi' priority -0.500000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode url
xsltCompilePattern : parsing 'marc:datafield'
xsltCompilePattern : parsed marc:datafield, default priority 0.000000
added pattern : 'marc:datafield' mode 'url' priority 0.000000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode url2
xsltCompilePattern : parsing 'marc:datafield'
xsltCompilePattern : parsed marc:datafield, default priority 0.000000
added pattern : 'marc:datafield' mode 'url2' priority 0.000000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode url2
xsltCompilePattern : parsing 'marc:datafield'
xsltCompilePattern : parsed marc:datafield, default priority 0.000000
added pattern : 'marc:datafield' mode 'url2' priority 0.000000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode title
xsltCompilePattern : parsing 'node()'
xsltCompilePattern : parsed node(), default priority -0.500000
added pattern : 'node()' mode 'title' priority -0.500000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode description
xsltParseTemplateContent: removing text
xsltCompilePattern : parsing 'marc:record'
xsltCompilePattern : parsed marc:record, default priority 0.000000
added pattern : 'marc:record' mode 'description' priority 0.000000
template has 1 inherited namespaces
xsltParseStylesheetTemplate: mode subject
xsltCompilePattern : parsing 'node()'
xsltCompilePattern : parsed node(), default priority -0.500000
added pattern : 'node()' mode 'subject' priority -0.500000
parsed 9 templates
Resolving attribute sets references
Creating sub-dictionary from stylesheet for transformation
Registered 0 modules
reusing transformation dict for output
Registering global variables
Registering global variables from cern_marc21.xsl
Evaluating global variable global_group
Object is a string : CERN
Evaluating global variable originatingSource
Object is a string : CERN
xsltProcessOneNode: no template found for /
xsltDefaultProcessOneNode: template found for PI xml-stylesheet
xsltCopy: PI xml-stylesheet
xsltProcessOneNode: applying template '@*|node()' for OAI-PMH
xsltCopy: node OAI-PMH
xsltApplyTemplates: node: 'OAI-PMH'
xsltApplyTemplates: select @*|node()
xsltApplyTemplates: list of 7 nodes
xsltProcessOneNode: applying template '@*|node()' for attribute schemaLocation
xsltCopy: attribute schemaLocation
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text 
	
xsltCopyText: copy text 
	
xsltProcessOneNode: applying template '@*|node()' for responseDate
xsltCopy: node responseDate
xsltApplyTemplates: node: 'responseDate'
xsltApplyTemplates: select @*|node()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text 2015-08-18T05:12:08Z
xsltCopyText: copy text 2015-08-18T05:12:08Z
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text 
	
xsltCopyText: copy text 
	
xsltProcessOneNode: applying template '@*|node()' for request
xsltCopy: node request
xsltApplyTemplates: node: 'request'
xsltApplyTemplates: select @*|node()
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template '@*|node()' for attribute verb
xsltCopy: attribute verb
xsltProcessOneNode: applying template '@*|node()' for attribute set
xsltCopy: attribute set
xsltProcessOneNode: applying template '@*|node()' for attribute metadataPrefix
xsltCopy: attribute metadataPrefix
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text http://cds.cern.ch/oai2d
xsltCopyText: copy text http://cds.cern.ch/oai2d
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text 
	
xsltCopyText: copy text 
	
xsltProcessOneNode: applying template '@*|node()' for ListRecords
xsltCopy: node ListRecords
xsltApplyTemplates: node: 'ListRecords'
xsltApplyTemplates: select @*|node()
xsltApplyTemplates: list of 72 nodes
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text 
		
xsltCopyText: copy text 
		
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185439
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ConferencePaper
2  TEXT
    content=ARTICLE
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text 
				
xsltCopyTextString: copy text oai:cds.cern.ch:185439
xsltCopyTextString: copy text 
				
xsltCopyTextString: copy text 2014-10-08T20:04:16Z
xsltCopyTextString: copy text 
				
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text 
				
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text 
			
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185439
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Metrology for experiments
xsltValueOf: result 'Metrology for experiments'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Lasseur, C
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lasseur, C
xsltValueOf: result 'Lasseur, C'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text accuracy
xsltValueOf: result 'accuracy'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text colliders
xsltValueOf: result 'colliders'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text instruments
xsltValueOf: result 'instruments'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text positioning
xsltValueOf: result 'positioning'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-001.255
xsltValueOf: result '10.5170/CERN-1987-001.255'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096871CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template '@*|node()' for text
xsltCopy: text 
		
xsltCopyText: copy text 
		
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185440
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185440
xsltCopyTextString: copy text 2014-10-08T20:04:16Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185440
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Future accelerators
xsltValueOf: result 'Future accelerators'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Johnsen, Kjell
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Johnsen, Kjell
xsltValueOf: result 'Johnsen, Kjell'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 12 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Eloisatron
xsltValueOf: result 'Eloisatron'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text HERA
xsltValueOf: result 'HERA'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text LEP
xsltValueOf: result 'LEP'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text LHC
xsltValueOf: result 'LHC'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text SLC
xsltValueOf: result 'SLC'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text SSC
xsltValueOf: result 'SSC'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text colliders
xsltValueOf: result 'colliders'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text linear
xsltValueOf: result 'linear'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text methods
xsltValueOf: result 'methods'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text new
xsltValueOf: result 'new'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text status
xsltValueOf: result 'status'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text survey
xsltValueOf: result 'survey'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-001.396
xsltValueOf: result '10.5170/CERN-1987-001.396'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096872CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185442
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185442
xsltCopyTextString: copy text 2014-10-08T20:04:16Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185442
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text After dinner speech
xsltValueOf: result 'After dinner speech'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Picasso, Emilio
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Picasso, Emilio
xsltValueOf: result 'Picasso, Emilio'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text LEP
xsltValueOf: result 'LEP'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text surveying
xsltValueOf: result 'surveying'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-001.13
xsltValueOf: result '10.5170/CERN-1987-001.13'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096874CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185457
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185457
xsltCopyTextString: copy text 2014-10-08T20:04:16Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185457
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Theory of RF acceleration
xsltValueOf: result 'Theory of RF acceleration'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=D#C3#B4me, Georges
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Dôme, Georges
xsltValueOf: result 'Dôme, Georges'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text formula
xsltValueOf: result 'formula'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text frequency
xsltValueOf: result 'frequency'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text motion
xsltValueOf: result 'motion'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text synchrotron
xsltValueOf: result 'synchrotron'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-003-V-1.110
xsltValueOf: result '10.5170/CERN-1987-003-V-1.110'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096889CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185459
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185459
xsltCopyTextString: copy text 2014-12-15T22:34:10Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185459
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Hamiltonian mechanics
xsltValueOf: result 'Hamiltonian mechanics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Bell, John Stewart
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Bell, John Stewart
xsltValueOf: result 'Bell, John Stewart'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text action
xsltValueOf: result 'action'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text canonical
xsltValueOf: result 'canonical'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text invariants
xsltValueOf: result 'invariants'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text scaling
xsltValueOf: result 'scaling'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text transformations
xsltValueOf: result 'transformations'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Other Fields of Physics
xsltValueOf: result 'Other Fields of Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-003-V-1.5
xsltValueOf: result '10.5170/CERN-1987-003-V-1.5'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096891CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185460
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185460
xsltCopyTextString: copy text 2014-10-08T20:04:16Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185460
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Chromatic effects and their first-order correction
xsltValueOf: result 'Chromatic effects and their first-order correction'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Montague, Brian William St. Leger
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Montague, Brian William St. Leger
xsltValueOf: result 'Montague, Brian William St. Leger'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 7 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text chromaticity
xsltValueOf: result 'chromaticity'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text dependence
xsltValueOf: result 'dependence'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text momentum
xsltValueOf: result 'momentum'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text perturbation
xsltValueOf: result 'perturbation'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text rings
xsltValueOf: result 'rings'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text storage
xsltValueOf: result 'storage'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text theory
xsltValueOf: result 'theory'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-003-V-1.75
xsltValueOf: result '10.5170/CERN-1987-003-V-1.75'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096892CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185463
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185463
xsltCopyTextString: copy text 2014-10-08T20:04:16Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185463
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Diffusion due to RF noise
xsltValueOf: result 'Diffusion due to RF noise'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=D#C3#B4me, Georges
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Dôme, Georges
xsltValueOf: result 'Dôme, Georges'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 9 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Fokker
xsltValueOf: result 'Fokker'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Planck
xsltValueOf: result 'Planck'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text bunches
xsltValueOf: result 'bunches'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text coefficients
xsltValueOf: result 'coefficients'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text collider
xsltValueOf: result 'collider'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text density
xsltValueOf: result 'density'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text phase
xsltValueOf: result 'phase'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text space
xsltValueOf: result 'space'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text spectral
xsltValueOf: result 'spectral'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-003-V-1.370
xsltValueOf: result '10.5170/CERN-1987-003-V-1.370'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096895CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185482
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185482
xsltCopyTextString: copy text 2014-10-08T20:04:17Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185482
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Summary report of the working group 5 on final focus and interaction point
xsltValueOf: result 'Summary report of the working group 5 on final focus and interaction point'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Chen, P
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Chen, P
xsltValueOf: result 'Chen, P'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 1-10TeVcm
xsltValueOf: result '1-10TeVcm'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text collider
xsltValueOf: result 'collider'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text linear
xsltValueOf: result 'linear'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-011-V-2.551
xsltValueOf: result '10.5170/CERN-1987-011-V-2.551'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096914CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185501
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185501
xsltCopyTextString: copy text 2014-10-08T20:04:17Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185501
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Gamma-gamma physics
xsltValueOf: result 'Gamma-gamma physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Miller, D J
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Miller, D J
xsltValueOf: result 'Miller, D J'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 14 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 100-1000GeVcm
xsltValueOf: result '100-1000GeVcm'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text e+ e-
xsltValueOf: result 'e+ e-'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text excitation
xsltValueOf: result 'excitation'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text exclusive
xsltValueOf: result 'exclusive'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text functions
xsltValueOf: result 'functions'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text gamma gamma
xsltValueOf: result 'gamma gamma'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text high
xsltValueOf: result 'high'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text meson
xsltValueOf: result 'meson'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text p(T)
xsltValueOf: result 'p(T)'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text photon
xsltValueOf: result 'photon'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text production
xsltValueOf: result 'production'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text resonance
xsltValueOf: result 'resonance'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text structure
xsltValueOf: result 'structure'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text survey
xsltValueOf: result 'survey'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Particle Physics - Phenomenology
xsltValueOf: result 'Particle Physics - Phenomenology'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-008-V-1.202
xsltValueOf: result '10.5170/CERN-1987-008-V-1.202'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0096933CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185758
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185758
xsltCopyTextString: copy text 2014-10-08T20:00:16Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185758
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Buses for high energy physics
xsltValueOf: result 'Buses for high energy physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=von R#C3#BCden, Wolfgang
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text von Rüden, Wolfgang
xsltValueOf: result 'von Rüden, Wolfgang'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 11 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text CAMAC
xsltValueOf: result 'CAMAC'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Ethernet
xsltValueOf: result 'Ethernet'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text FASTBUS
xsltValueOf: result 'FASTBUS'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text G64
xsltValueOf: result 'G64'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text LAN
xsltValueOf: result 'LAN'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text UTInet
xsltValueOf: result 'UTInet'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text VAXBI
xsltValueOf: result 'VAXBI'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text VME
xsltValueOf: result 'VME'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text acquisition
xsltValueOf: result 'acquisition'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text data
xsltValueOf: result 'data'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text interfaces
xsltValueOf: result 'interfaces'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-004.100
xsltValueOf: result '10.5170/CERN-1987-004.100'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097193CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185877
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185877
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185877
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Copper-beryllium alloys for technical applications
xsltValueOf: result 'Copper-beryllium alloys for technical applications'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Heller, Wolfram
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Heller, Wolfram
xsltValueOf: result 'Heller, Wolfram'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Engineering
xsltValueOf: result 'Engineering'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-001
xsltValueOf: result '10.5170/CERN-1976-001'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097312CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 189430
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197605096
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 189430
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 110898
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 110898
xsltValueOf: result '110898'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185878
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185878
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185878
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text List of publications covering bubble-chamber experiments carried out at CERN during the period 1960-1974
xsltValueOf: result 'List of publications covering bubble-chamber experiments carried out at CERN during the period 1960-1974'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Steel, Ella Wentworth Dyne
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Steel, Ella Wentworth Dyne
xsltValueOf: result 'Steel, Ella Wentworth Dyne'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text bibliography
xsltValueOf: result 'bibliography'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Information Transfer and Management
xsltValueOf: result 'Information Transfer and Management'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-002
xsltValueOf: result '10.5170/CERN-1976-002'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197604172
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 189316
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 110896
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 110896
xsltValueOf: result '110896'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185879
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185879
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185879
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text List of publications covering bubble-chamber experiments carried out at CERN during the year 1975
xsltValueOf: result 'List of publications covering bubble-chamber experiments carried out at CERN during the year 1975'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Steel, Ella Wentworth Dyne
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Steel, Ella Wentworth Dyne
xsltValueOf: result 'Steel, Ella Wentworth Dyne'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text bibliography
xsltValueOf: result 'bibliography'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Information Transfer and Management
xsltValueOf: result 'Information Transfer and Management'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-002-ADD-1
xsltValueOf: result '10.5170/CERN-1976-002-ADD-1'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 203203
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111626
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111626
xsltValueOf: result '111626'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185880
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185880
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185880
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Système tridimensionnel de coordonnées utilisé au CERN
xsltValueOf: result 'Système tridimensionnel de coordonnées utilisé au CERN'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 3 nodes:
1  TEXT
    content=Gervaise, Jean
2  TEXT
    content=Mayoud, Michel
3  TEXT
    content=Menant, Elie
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 3 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Gervaise, Jean
xsltValueOf: result 'Gervaise, Jean'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Mayoud, Michel
xsltValueOf: result 'Mayoud, Michel'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Menant, Elie
xsltValueOf: result 'Menant, Elie'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-003-FRE
xsltValueOf: result '10.5170/CERN-1976-003-FRE'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197606014
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 189448
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185883
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185883
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185883
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text The radiation environment of proton accelerators and storage rings
xsltValueOf: result 'The radiation environment of proton accelerators and storage rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Stevenson, Graham Roger
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Stevenson, Graham Roger
xsltValueOf: result 'Stevenson, Graham Roger'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-004
xsltValueOf: result '10.5170/CERN-1976-004'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097318CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197607068
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111015
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111015
xsltValueOf: result '111015'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185918
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185918
xsltCopyTextString: copy text 2014-12-15T22:32:57Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185918
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text New methods of measuring spin-rotation parameters in hadron-hadron elastic scattering
xsltValueOf: result 'New methods of measuring spin-rotation parameters in hadron-hadron elastic scattering'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 5 nodes:
1  TEXT
    content=Antille, Jacques
2  TEXT
    content=Dick, Louis
3  TEXT
    content=Gonidec, Allain
4  TEXT
    content=Kuroda, Kei Ichi
5  TEXT
    content=Madansky, L#C3#A9on
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 5 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Antille, Jacques
xsltValueOf: result 'Antille, Jacques'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Dick, Louis
xsltValueOf: result 'Dick, Louis'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Gonidec, Allain
xsltValueOf: result 'Gonidec, Allain'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Kuroda, Kei Ichi
xsltValueOf: result 'Kuroda, Kei Ichi'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Madansky, Léon
xsltValueOf: result 'Madansky, Léon'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 7 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Wolfenstein spin parameters
xsltValueOf: result 'Wolfenstein spin parameters'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text elastic scatterings
xsltValueOf: result 'elastic scatterings'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text hadron hadron scattering
xsltValueOf: result 'hadron hadron scattering'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text precision
xsltValueOf: result 'precision'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text spin measurement
xsltValueOf: result 'spin measurement'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text spin precession
xsltValueOf: result 'spin precession'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text hadron-scatteringINSPECspinINSPECspin rotation parameters
xsltValueOf: result 'hadron-scatteringINSPECspinINSPECspin rotation parameters'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-005
xsltValueOf: result '10.5170/CERN-1976-005'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097353CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 131911
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197607039
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 131911
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 108882
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 108882
xsltValueOf: result '108882'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185921
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185921
xsltCopyTextString: copy text 2014-12-15T22:32:57Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185921
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text The general theory of all sum and difference resonances in a three-dimensional magnetic field in a synchrotron
xsltValueOf: result 'The general theory of all sum and difference resonances in a three-dimensional magnetic field in a synchrotron'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Guignard, Gilbert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Guignard, Gilbert
xsltValueOf: result 'Guignard, Gilbert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-006
xsltValueOf: result '10.5170/CERN-1976-006'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097356CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197607176
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111031
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111031
xsltValueOf: result '111031'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185924
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185924
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185924
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Application de l'analyse dimensionnelle à l'étude des enveloppes soumises à une pression extérieure et à l'utilisation de modèles
xsltValueOf: result 'Application de l'analyse dimensionnelle à l'étude des enveloppes soumises à une pression extérieure et à l'utilisation de modèles'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Lefran#C3#A7ois, Aymar
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lefrançois, Aymar
xsltValueOf: result 'Lefrançois, Aymar'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-007
xsltValueOf: result '10.5170/CERN-1976-007'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097359CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197608019
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111048
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111048
xsltValueOf: result '111048'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185926
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185926
xsltCopyTextString: copy text 2014-12-15T22:33:09Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185926
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A system for communication between a CDC 6000 and a PDP-11 computer
xsltValueOf: result 'A system for communication between a CDC 6000 and a PDP-11 computer'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 4 nodes:
1  TEXT
    content=Von Eicken, H
2  TEXT
    content=Lee, John Gordon
3  TEXT
    content=Piney, Crispin
4  TEXT
    content=Van Praag, Adrianes
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 4 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Von Eicken, H
xsltValueOf: result 'Von Eicken, H'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lee, John Gordon
xsltValueOf: result 'Lee, John Gordon'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Piney, Crispin
xsltValueOf: result 'Piney, Crispin'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van Praag, Adrianes
xsltValueOf: result 'Van Praag, Adrianes'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Computing and Computers
xsltValueOf: result 'Computing and Computers'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-008
xsltValueOf: result '10.5170/CERN-1976-008'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097361CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 192295
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197608018
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 192295
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111049
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111049
xsltValueOf: result '111049'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185933
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185939
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185939
xsltCopyTextString: copy text 2014-12-15T22:33:11Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185939
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text The birth of quantum mechanics
xsltValueOf: result 'The birth of quantum mechanics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Mehra, Jagdish
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Mehra, Jagdish
xsltValueOf: result 'Mehra, Jagdish'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text bibliography
xsltValueOf: result 'bibliography'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text General Theoretical Physics
xsltValueOf: result 'General Theoretical Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-010
xsltValueOf: result '10.5170/CERN-1976-010'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197608100
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 192732
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097374CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 192732
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111084
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111084
xsltValueOf: result '111084'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185945
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185954
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185954
xsltCopyTextString: copy text 2014-12-15T22:33:23Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185954
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text The physics interests of a 10 TeV proton synchrotron, 400 x 400 GeV$^2$ storage rings, and electron-proton storage rings
xsltValueOf: result 'The physics interests of a 10 TeV proton synchrotron, 400 x 400 GeV$^2$ storage rings, and electron-proton storage rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Camilleri, Leslie Loris
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Camilleri, Leslie Loris
xsltValueOf: result 'Camilleri, Leslie Loris'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Particle Physics
xsltValueOf: result 'Particle Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-012
xsltValueOf: result '10.5170/CERN-1976-012'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197609062
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 142620
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097389CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 142620
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 109568
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 109568
xsltValueOf: result '109568'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185956
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185957
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185957
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185957
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Electronic equipment for wire-stretching machines
xsltValueOf: result 'Electronic equipment for wire-stretching machines'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Rasmussen, Niels
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Rasmussen, Niels
xsltValueOf: result 'Rasmussen, Niels'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Engineering
xsltValueOf: result 'Engineering'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-015
xsltValueOf: result '10.5170/CERN-1976-015'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097392CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197612171
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111288
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111288
xsltValueOf: result '111288'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185958
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=ARTICLE
2  TEXT
    content=ConferencePaper
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185958
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text DOI
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185958
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Physics at LEP
xsltValueOf: result 'Physics at LEP'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Peccei, Roberto D
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Peccei, Roberto D
xsltValueOf: result 'Peccei, Roberto D'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text bibliography
xsltValueOf: result 'bibliography'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Particle Physics
xsltValueOf: result 'Particle Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1987-002.209
xsltValueOf: result '10.5170/CERN-1987-002.209'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097393CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185959
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185959
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185959
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Construction of a prototype superconducting quadrupole magnet for a high-luminosity insertion at the CERN Intersecting Storage Rings
xsltValueOf: result 'Construction of a prototype superconducting quadrupole magnet for a high-luminosity insertion at the CERN Intersecting Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 5 nodes:
1  TEXT
    content=Billan, Jacques
2  TEXT
    content=Perin, Romeo
3  TEXT
    content=Resegotti, Lorenzo
4  TEXT
    content=Tortschanoff, Theodor
5  TEXT
    content=Wolf, Robert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 5 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Billan, Jacques
xsltValueOf: result 'Billan, Jacques'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Perin, Romeo
xsltValueOf: result 'Perin, Romeo'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Resegotti, Lorenzo
xsltValueOf: result 'Resegotti, Lorenzo'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Tortschanoff, Theodor
xsltValueOf: result 'Tortschanoff, Theodor'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Wolf, Robert
xsltValueOf: result 'Wolf, Robert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-016
xsltValueOf: result '10.5170/CERN-1976-016'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097394CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197416
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197701018
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197416
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111325
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111325
xsltValueOf: result '111325'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185960
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185960
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185960
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text The Digitron system
xsltValueOf: result 'The Digitron system'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 3 nodes:
1  TEXT
    content=Pizer, Henry Ian
2  TEXT
    content=Van Koningsveld, Lambertus
3  TEXT
    content=Verweij, Hendrik
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 3 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Pizer, Henry Ian
xsltValueOf: result 'Pizer, Henry Ian'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van Koningsveld, Lambertus
xsltValueOf: result 'Van Koningsveld, Lambertus'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Verweij, Hendrik
xsltValueOf: result 'Verweij, Hendrik'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-017
xsltValueOf: result '10.5170/CERN-1976-017'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097395CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 198390
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197701128
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 198390
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 111392
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 111392
xsltValueOf: result '111392'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185961
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185961
xsltCopyTextString: copy text 2013-04-18T14:32:59Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185961
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Physics with very high-energy $e^{+}e^{-}$ colliding beams
xsltValueOf: result 'Physics with very high-energy $e^{+}e^{-}$ colliding beams'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=This report consists of a collection of ...
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 19 nodes:
1  TEXT
    content=Cundy, Donald C
2  TEXT
    content=Darriulat, Pierre
3  TEXT
    content=Ellis, Jonathan Richard
4  TEXT
    content=Field, John
5  TEXT
    content=Fischer, H
6  TEXT
    content=Gabathuler, Erwin
7  TEXT
    content=Gaillard, Mary Katherin
8  TEXT
    content=Hoffmann, Hans Falk
9  TEXT
    content=Johnsen, Kjell
10  TEXT
    content=Keil, Eberhard
11  TEXT
    content=Palmonari, Federico
12  TEXT
    content=Preparata, Giuliano
13  TEXT
    content=Richter, Burton
14  TEXT
    content=Rubbia, Carlo
15  TEXT
    content=Steinberger, Jack
16  TEXT
    content=Wiik, Bj#C3#B8rn Haavard
17  TEXT
    content=Willis, William J
18  TEXT
    content=Winter, Klaus
19  TEXT
    content=Camilleri, Leslie Loris
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 1
xsltValueOf: select $abstract
Lookup variable 'abstract'
xsltCopyTextString: copy text This report consists of a collection of documents produced by a study group on large electron-positron storage rings (LEP). The reactions of interest in the weak, electromagnetic and strong interactions are discussed. The technical feasibility of the relevant experiments is investigated by attempting, in each case, the design of an experimental set-up. Event rates are estimated using currently prevailing theoretical models and by extrapolation of results at present accelerators. A number of technical reports previously issued by members of the LEP Design Study Group are included as appendices.
xsltValueOf: result 'This report consists of a collection of documents produced by a study group on large electron-positron storage rings (LEP). The reactions of interest in the weak, electromagnetic and strong interactions are discussed. The technical feasibility of the relevant experiments is investigated by attempting, in each case, the design of an experimental set-up. Event rates are estimated using currently prevailing theoretical models and by extrapolation of results at present accelerators. A number of technical reports previously issued by members of the LEP Design Study Group are included as appendices.'
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 19 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Cundy, Donald C
xsltValueOf: result 'Cundy, Donald C'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Darriulat, Pierre
xsltValueOf: result 'Darriulat, Pierre'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Ellis, Jonathan Richard
xsltValueOf: result 'Ellis, Jonathan Richard'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Field, John
xsltValueOf: result 'Field, John'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Fischer, H
xsltValueOf: result 'Fischer, H'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Gabathuler, Erwin
xsltValueOf: result 'Gabathuler, Erwin'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Gaillard, Mary Katherin
xsltValueOf: result 'Gaillard, Mary Katherin'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Hoffmann, Hans Falk
xsltValueOf: result 'Hoffmann, Hans Falk'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Johnsen, Kjell
xsltValueOf: result 'Johnsen, Kjell'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Keil, Eberhard
xsltValueOf: result 'Keil, Eberhard'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Palmonari, Federico
xsltValueOf: result 'Palmonari, Federico'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Preparata, Giuliano
xsltValueOf: result 'Preparata, Giuliano'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Richter, Burton
xsltValueOf: result 'Richter, Burton'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Rubbia, Carlo
xsltValueOf: result 'Rubbia, Carlo'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Steinberger, Jack
xsltValueOf: result 'Steinberger, Jack'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Wiik, Bjørn Haavard
xsltValueOf: result 'Wiik, Bjørn Haavard'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Willis, William J
xsltValueOf: result 'Willis, William J'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Winter, Klaus
xsltValueOf: result 'Winter, Klaus'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Camilleri, Leslie Loris
xsltValueOf: result 'Camilleri, Leslie Loris'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text e+ e-
xsltValueOf: result 'e+ e-'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Particle Physics
xsltValueOf: result 'Particle Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-018
xsltValueOf: result '10.5170/CERN-1976-018'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 110623
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 110623
xsltValueOf: result '110623'
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197701149
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185962
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185962
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185962
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Low-energy recoil measurements in high-energy physics
xsltValueOf: result 'Low-energy recoil measurements in high-energy physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Ekel#C3#B6f, T J C
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Ekelöf, T J C
xsltValueOf: result 'Ekelöf, T J C'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1976-023
xsltValueOf: result '10.5170/CERN-1976-023'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097397CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 112095
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 112095
xsltValueOf: result '112095'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185977
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=PROCEEDINGS
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185978
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=PROCEEDINGS
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185979
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185979
xsltCopyTextString: copy text 2014-12-15T22:32:47Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185979
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Calculation of the neutron-induced background in the Gargamelle neutral current search
xsltValueOf: result 'Calculation of the neutron-induced background in the Gargamelle neutral current search'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=Fry, W F
2  TEXT
    content=Haidt, Dieter
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 2 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Fry, W F
xsltValueOf: result 'Fry, W F'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Haidt, Dieter
xsltValueOf: result 'Haidt, Dieter'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-001
xsltValueOf: result '10.5170/CERN-1975-001'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 66826
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197503089
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 66826
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 98412
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 98412
xsltValueOf: result '98412'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185980
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185980
xsltCopyTextString: copy text 2014-12-15T22:32:47Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185980
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Power laws in particle physics
xsltValueOf: result 'Power laws in particle physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=Amati, Daniele
2  TEXT
    content=Fubini, Sergio P
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 2 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Amati, Daniele
xsltValueOf: result 'Amati, Daniele'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Fubini, Sergio P
xsltValueOf: result 'Fubini, Sergio P'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text General Theoretical Physics
xsltValueOf: result 'General Theoretical Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-002
xsltValueOf: result '10.5170/CERN-1975-002'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 80055
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197506121
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 80055
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 99171
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 99171
xsltValueOf: result '99171'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185990
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185990
xsltCopyTextString: copy text 2014-12-15T22:32:47Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185990
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Radiation and fire resistance of cable-insulating materials used in accelerator engineering
xsltValueOf: result 'Radiation and fire resistance of cable-insulating materials used in accelerator engineering'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=Sch#C3#B6nbacher, Helmut
2  TEXT
    content=Van de Voorde, Marcel Hubert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 2 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schönbacher, Helmut
xsltValueOf: result 'Schönbacher, Helmut'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van de Voorde, Marcel Hubert
xsltValueOf: result 'Van de Voorde, Marcel Hubert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-003
xsltValueOf: result '10.5170/CERN-1975-003'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097425CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197506122
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 101470
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 101470
xsltValueOf: result '101470'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185993
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185993
xsltCopyTextString: copy text 2013-01-21T15:08:21Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185993
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A comparison of the radiation damage of electronic components irradiated in different radiation fields
xsltValueOf: result 'A comparison of the radiation damage of electronic components irradiated in different radiation fields'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 3 nodes:
1  TEXT
    content=Lambert, K P
2  TEXT
    content=Sch#C3#B6nbacher, Helmut
3  TEXT
    content=Van de Voorde, Marcel Hubert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 3 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lambert, K P
xsltValueOf: result 'Lambert, K P'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schönbacher, Helmut
xsltValueOf: result 'Schönbacher, Helmut'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van de Voorde, Marcel Hubert
xsltValueOf: result 'Van de Voorde, Marcel Hubert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-004
xsltValueOf: result '10.5170/CERN-1975-004'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 101535
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 101535
xsltValueOf: result '101535'
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197507199
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:185996
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185996
xsltCopyTextString: copy text 2014-12-15T22:32:49Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:185996
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A study of economic utility resulting from CERN contracts
xsltValueOf: result 'A study of economic utility resulting from CERN contracts'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Schmied, Helwig
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schmied, Helwig
xsltValueOf: result 'Schmied, Helwig'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-005
xsltValueOf: result '10.5170/CERN-1975-005'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097431CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197508086
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 101599
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 101599
xsltValueOf: result '101599'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186004
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186004
xsltCopyTextString: copy text 2014-12-15T22:32:50Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186004
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Etude de l'utilité économique des contrats du CERN
xsltValueOf: result 'Etude de l'utilité économique des contrats du CERN'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Schmied, Helwig
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schmied, Helwig
xsltValueOf: result 'Schmied, Helwig'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Commerce, Economics, Social Science
xsltValueOf: result 'Commerce, Economics, Social Science'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-006
xsltValueOf: result '10.5170/CERN-1975-006'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097439CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 107161
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 107161
xsltValueOf: result '107161'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186009
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186009
xsltCopyTextString: copy text 2014-12-15T22:32:50Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186009
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A history of the collaboration between the European Organization for Nuclear Research (CERN) and the Joint Institute for Nuclear Research (JINR), and with Soviet research institutes in the USSR 1955-1970
xsltValueOf: result 'A history of the collaboration between the European Organization for Nuclear Research (CERN) and the Joint Institute for Nuclear Research (JINR), and with Soviet research institutes in the USSR 1955-1970'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Lock, William Owen
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lock, William Owen
xsltValueOf: result 'Lock, William Owen'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text JINR
xsltValueOf: result 'JINR'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text history
xsltValueOf: result 'history'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text scientific collaboration
xsltValueOf: result 'scientific collaboration'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text survey
xsltValueOf: result 'survey'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Commerce, Economics, Social Science
xsltValueOf: result 'Commerce, Economics, Social Science'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-007
xsltValueOf: result '10.5170/CERN-1975-007'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 180009
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197508142
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 180009
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 101584
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 101584
xsltValueOf: result '101584'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186013
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186016
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186016
xsltCopyTextString: copy text 2014-12-15T22:32:51Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186016
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A new collective-field acceleration mechanism using a powerful laser
xsltValueOf: result 'A new collective-field acceleration mechanism using a powerful laser'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Willis, William J
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Willis, William J
xsltValueOf: result 'Willis, William J'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-009
xsltValueOf: result '10.5170/CERN-1975-009'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097451CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197509179
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 101651
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 101651
xsltValueOf: result '101651'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186050
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186050
xsltCopyTextString: copy text 2014-12-15T22:34:07Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186050
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Measurement of the real part of the forward scattering amplitude by means of the Coulomb-nuclear interference in $\pi^{\pm}$ p and K$^{\pm}$ p elastic scattering at incident momenta below 3 GeV/c
xsltValueOf: result 'Measurement of the real part of the forward scattering amplitude by means of the Coulomb-nuclear interference in $\pi^{\pm}$ p and K$^{\pm}$ p elastic scattering at incident momenta below 3 GeV/c'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 9 nodes:
1  TEXT
    content=Baillon, Paul
2  TEXT
    content=Bricman, Claude
3  TEXT
    content=D#C3#A9clais, Yves
4  TEXT
    content=Ferro-Luzzi, Massimiliano
5  TEXT
    content=Jenni, Peter
6  TEXT
    content=Perreau, Jean Marie
7  TEXT
    content=S#C3#A9guinot, Jacques
8  TEXT
    content=Tripp, Robert D
9  TEXT
    content=Ypsilantis, Thomas
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 9 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Baillon, Paul
xsltValueOf: result 'Baillon, Paul'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Bricman, Claude
xsltValueOf: result 'Bricman, Claude'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Déclais, Yves
xsltValueOf: result 'Déclais, Yves'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Ferro-Luzzi, Massimiliano
xsltValueOf: result 'Ferro-Luzzi, Massimiliano'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Jenni, Peter
xsltValueOf: result 'Jenni, Peter'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Perreau, Jean Marie
xsltValueOf: result 'Perreau, Jean Marie'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Séguinot, Jacques
xsltValueOf: result 'Séguinot, Jacques'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Tripp, Robert D
xsltValueOf: result 'Tripp, Robert D'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Ypsilantis, Thomas
xsltValueOf: result 'Ypsilantis, Thomas'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text pi+
xsltValueOf: result 'pi+'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text pi-
xsltValueOf: result 'pi-'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text K+
xsltValueOf: result 'K+'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text K-
xsltValueOf: result 'K-'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Particle Physics
xsltValueOf: result 'Particle Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-010
xsltValueOf: result '10.5170/CERN-1975-010'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097485CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 96016
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197512122
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 96016
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 100214
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 100214
xsltValueOf: result '100214'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186056
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186060
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186060
xsltCopyTextString: copy text 2014-12-15T22:32:56Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186060
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A 256-channel pulse height analyser
xsltValueOf: result 'A 256-channel pulse height analyser'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 3 nodes:
1  TEXT
    content=Berset, Jean Claude
2  TEXT
    content=Delavallade, G#C3#A9rard
3  TEXT
    content=Lindsay, John B
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 3 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Berset, Jean Claude
xsltValueOf: result 'Berset, Jean Claude'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Delavallade, Gérard
xsltValueOf: result 'Delavallade, Gérard'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lindsay, John B
xsltValueOf: result 'Lindsay, John B'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-012
xsltValueOf: result '10.5170/CERN-1975-012'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 98485
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197601018
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 98485
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 100388
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 100388
xsltValueOf: result '100388'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186061
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186061
xsltCopyTextString: copy text 2014-12-15T22:32:56Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186061
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text AGS
xsltValueOf: result 'AGS'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 4 nodes:
1  TEXT
    content=Keil, Eberhard
2  TEXT
    content=Marti, Yolande
3  TEXT
    content=Montague, Brian William St. Leger
4  TEXT
    content=Sudb#C3#B8, A
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 4 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Keil, Eberhard
xsltValueOf: result 'Keil, Eberhard'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Marti, Yolande
xsltValueOf: result 'Marti, Yolande'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Montague, Brian William St. Leger
xsltValueOf: result 'Montague, Brian William St. Leger'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Sudbø, A
xsltValueOf: result 'Sudbø, A'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-013
xsltValueOf: result '10.5170/CERN-1975-013'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097496CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197602020
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102009
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102009
xsltValueOf: result '102009'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186062
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186062
xsltCopyTextString: copy text 2014-12-15T22:32:56Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186062
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Monte Carlo calculations of the neutron transmission through the access ways of the CERN Super Proton Synchrotron
xsltValueOf: result 'Monte Carlo calculations of the neutron transmission through the access ways of the CERN Super Proton Synchrotron'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Vogt, H
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Vogt, H
xsltValueOf: result 'Vogt, H'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-014
xsltValueOf: result '10.5170/CERN-1975-014'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097497CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197602021
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102010
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102010
xsltValueOf: result '102010'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186063
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186063
xsltCopyTextString: copy text 2014-12-15T22:32:58Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186063
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Terminals for the interactive input and editing of bibliographic records on the PDP-11 computer in the CERN library
xsltValueOf: result 'Terminals for the interactive input and editing of bibliographic records on the PDP-11 computer in the CERN library'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Van Praag, Adrianes
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van Praag, Adrianes
xsltValueOf: result 'Van Praag, Adrianes'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Information Transfer and Management
xsltValueOf: result 'Information Transfer and Management'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-015
xsltValueOf: result '10.5170/CERN-1975-015'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097498CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197602098
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102011
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102011
xsltValueOf: result '102011'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186064
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186064
xsltCopyTextString: copy text 2014-12-15T22:32:58Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186064
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Effects of nuclear radiation on the optical properties of cerium-doped glass
xsltValueOf: result 'Effects of nuclear radiation on the optical properties of cerium-doped glass'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 3 nodes:
1  TEXT
    content=McGrath, Bernadette
2  TEXT
    content=Sch#C3#B6nbacher, Helmut
3  TEXT
    content=Van de Voorde, Marcel Hubert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 3 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text McGrath, Bernadette
xsltValueOf: result 'McGrath, Bernadette'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schönbacher, Helmut
xsltValueOf: result 'Schönbacher, Helmut'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van de Voorde, Marcel Hubert
xsltValueOf: result 'Van de Voorde, Marcel Hubert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-016
xsltValueOf: result '10.5170/CERN-1975-016'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097499CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102051
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102051
xsltValueOf: result '102051'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186073
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ARTICLE
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186073
xsltCopyTextString: copy text 2014-12-15T22:33:10Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltCopyTextString: copy text cerncds:CERN:FULLTEXT
xsltCopyTextString: copy text cerncds:CERN
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186073
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Calculation and optimization of stray fields of septum dipole magnets
xsltValueOf: result 'Calculation and optimization of stray fields of septum dipole magnets'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=A theoretical treatment is described of ...
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=Holmes, Andrew J T
2  TEXT
    content=Holmes1, Andrew J T
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 1
xsltValueOf: select $abstract
Lookup variable 'abstract'
xsltCopyTextString: copy text A theoretical treatment is described of the external stray field of C- shaped septum magnets, such as those designed for the beam extraction systems of the 400 GeV CERN Super Proton Synchrotron. A special conformal transformation of the magnetic plane yields analytic expressions for the four components of the stray field: the septum- shape field (due to the form of the septum conductor), the edge-effect field (due to the mechanical clearance between septum and yoke), the cooling-duct field (due to the presence of these ducts in the septum), and the magnetomotance field (caused by the ampere-turn losses in the yoke). These expressions can be computed by numerical iteration. The septum-shape field turns out to be opposite in sign to the other three, making possible a criterion which creates a minimal stray field for a given magnetic induction. Plots of calculated and measured stray fields are presented for four prototype septum magnets whose total induction is between 0.38 and 1.41 T. (3 refs).
xsltValueOf: result 'A theoretical treatment is described of the external stray field of C- shaped septum magnets, such as those designed for the beam extraction systems of the 400 GeV CERN Super Proton Synchrotron. A special conformal transformation of the magnetic plane yields analytic expressions for the four components of the stray field: the septum- shape field (due to the form of the septum conductor), the edge-effect field (due to the mechanical clearance between septum and yoke), the cooling-duct field (due to the presence of these ducts in the septum), and the magnetomotance field (caused by the ampere-turn losses in the yoke). These expressions can be computed by numerical iteration. The septum-shape field turns out to be opposite in sign to the other three, making possible a criterion which creates a minimal stray field for a given magnetic induction. Plots of calculated and measured stray fields are presented for four prototype septum magnets whose total induction is between 0.38 and 1.41 T. (3 refs).'
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 2 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Holmes, Andrew J T
xsltValueOf: result 'Holmes, Andrew J T'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Holmes1, Andrew J T
xsltValueOf: result 'Holmes1, Andrew J T'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 8 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 400 GeV CERN Super Proton Synchrotron
xsltValueOf: result '400 GeV CERN Super Proton Synchrotron'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text conformal transformation
xsltValueOf: result 'conformal transformation'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text cooling duct field
xsltValueOf: result 'cooling duct field'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text edge effect field
xsltValueOf: result 'edge effect field'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text magnetomotance field
xsltValueOf: result 'magnetomotance field'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text septum dipole magnets
xsltValueOf: result 'septum dipole magnets'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text septum shape field
xsltValueOf: result 'septum shape field'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text stray fields
xsltValueOf: result 'stray fields'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Engineering
xsltValueOf: result 'Engineering'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Nuclear Physics
xsltValueOf: result 'Nuclear Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.1016/0029-554X(76)90090-2
xsltValueOf: result '10.1016/0029-554X(76)90090-2'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-017
xsltValueOf: result '10.5170/CERN-1975-017'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197602099
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 185841
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102015
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102015
xsltValueOf: result '102015'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186078
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186078
xsltCopyTextString: copy text 2014-12-15T22:33:11Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186078
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Radiation damage to electronic components
xsltValueOf: result 'Radiation damage to electronic components'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 4 nodes:
1  TEXT
    content=Battisti, Sylvain
2  TEXT
    content=Bossart, Rudolf
3  TEXT
    content=Sch#C3#B6nbacher, Helmut
4  TEXT
    content=Van de Voorde, Marcel Hubert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 4 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Battisti, Sylvain
xsltValueOf: result 'Battisti, Sylvain'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Bossart, Rudolf
xsltValueOf: result 'Bossart, Rudolf'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schönbacher, Helmut
xsltValueOf: result 'Schönbacher, Helmut'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Van de Voorde, Marcel Hubert
xsltValueOf: result 'Van de Voorde, Marcel Hubert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-018
xsltValueOf: result '10.5170/CERN-1975-018'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097513CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 186120
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 186120
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102040
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102040
xsltValueOf: result '102040'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186083
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186083
xsltCopyTextString: copy text 2014-12-15T22:33:11Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186083
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Instruction timing for the CDC 7600 computer
xsltValueOf: result 'Instruction timing for the CDC 7600 computer'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Lipps, Herbert
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lipps, Herbert
xsltValueOf: result 'Lipps, Herbert'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Computing and Computers
xsltValueOf: result 'Computing and Computers'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-019
xsltValueOf: result '10.5170/CERN-1975-019'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097518CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197604171
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102199
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102199
xsltValueOf: result '102199'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186084
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186084
xsltCopyTextString: copy text 2014-12-15T22:33:11Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186084
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text The design of the control system for the SPS
xsltValueOf: result 'The design of the control system for the SPS'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Crowley-Milling, Michael C
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Crowley-Milling, Michael C
xsltValueOf: result 'Crowley-Milling, Michael C'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1975-020
xsltValueOf: result '10.5170/CERN-1975-020'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097519CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 187283
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197603160
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 187283
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 102117
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 102117
xsltValueOf: result '102117'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186147
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ARTICLE
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186147
xsltCopyTextString: copy text 2014-12-15T22:33:13Z
xsltCopyTextString: copy text cerncds:CERN:FULLTEXT
xsltCopyTextString: copy text cerncds:CERN
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186147
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Computer-aided control of separated bubble-chamber beams
xsltValueOf: result 'Computer-aided control of separated bubble-chamber beams'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 4 nodes:
1  TEXT
    content=Lazeyras, Pierre
2  TEXT
    content=Lehraus, Ivan
3  TEXT
    content=Matthewson, Roy
4  TEXT
    content=Tejessy, Wolfgang
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 4 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lazeyras, Pierre
xsltValueOf: result 'Lazeyras, Pierre'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lehraus, Ivan
xsltValueOf: result 'Lehraus, Ivan'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Matthewson, Roy
xsltValueOf: result 'Matthewson, Roy'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Tejessy, Wolfgang
xsltValueOf: result 'Tejessy, Wolfgang'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-001
xsltValueOf: result '10.5170/CERN-1974-001'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.1016/0029-554X(75)90075-0
xsltValueOf: result '10.1016/0029-554X(75)90075-0'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 4 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 26972
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400001
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 26972
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 89143
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 89143
xsltValueOf: result '89143'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186178
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186178
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186178
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text DECAY TURTLE (Trace Unlimted Rays Through Lumped Elements)
xsltValueOf: result 'DECAY TURTLE (Trace Unlimted Rays Through Lumped Elements)'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=Brown, Karl L
2  TEXT
    content=Iselin, F Christoph
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 2 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Brown, Karl L
xsltValueOf: result 'Brown, Karl L'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Iselin, F Christoph
xsltValueOf: result 'Iselin, F Christoph'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-002
xsltValueOf: result '10.5170/CERN-1974-002'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400002
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 170097
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92293
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92293
xsltValueOf: result '92293'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186179
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186179
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186179
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Analyse de la perte de poids des testicules de souris après irradiation aux neutrons de 14 et de 400 MeV
xsltValueOf: result 'Analyse de la perte de poids des testicules de souris après irradiation aux neutrons de 14 et de 400 MeV'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Laurent, Jean Michel
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Laurent, Jean Michel
xsltValueOf: result 'Laurent, Jean Michel'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Health Physics and Radiation Effects
xsltValueOf: result 'Health Physics and Radiation Effects'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-003
xsltValueOf: result '10.5170/CERN-1974-003'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400003
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 171123
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92336
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92336
xsltValueOf: result '92336'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186182
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ARTICLE
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186182
xsltCopyTextString: copy text 2014-12-15T22:32:44Z
xsltCopyTextString: copy text cerncds:CERN:FULLTEXT
xsltCopyTextString: copy text cerncds:CERN
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186182
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Image-intensifier camera for streamer-chamber photography
xsltValueOf: result 'Image-intensifier camera for streamer-chamber photography'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 4 nodes:
1  TEXT
    content=Gentsch, Heinrich
2  TEXT
    content=Gygi, Edmond
3  TEXT
    content=Hanney, M
4  TEXT
    content=Schneider, Fritz
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 4 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Gentsch, Heinrich
xsltValueOf: result 'Gentsch, Heinrich'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Gygi, Edmond
xsltValueOf: result 'Gygi, Edmond'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Hanney, M
xsltValueOf: result 'Hanney, M'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Schneider, Fritz
xsltValueOf: result 'Schneider, Fritz'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.1016/0029-554X(74)90007-X
xsltValueOf: result '10.1016/0029-554X(74)90007-X'
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-004
xsltValueOf: result '10.5170/CERN-1974-004'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400004
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 6711499
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 95972
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 95972
xsltValueOf: result '95972'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186185
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186185
xsltCopyTextString: copy text 2014-12-15T22:32:45Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186185
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Machine à bobiner les fils métalliques ultra-fins utilisés dans la fabrication des chambres à fils de petites dimensions
xsltValueOf: result 'Machine à bobiner les fils métalliques ultra-fins utilisés dans la fabrication des chambres à fils de petites dimensions'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Beno#C3#AEt, Ren#C3#A9 Eug#C3#A8ne
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Benoît, René Eugène
xsltValueOf: result 'Benoît, René Eugène'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-005
xsltValueOf: result '10.5170/CERN-1974-005'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097620CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400005
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 95636
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 95636
xsltValueOf: result '95636'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186188
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186188
xsltCopyTextString: copy text 2014-12-15T22:32:45Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186188
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A versatile cable and connector assembly testing apparatus (NP 2026)
xsltValueOf: result 'A versatile cable and connector assembly testing apparatus (NP 2026)'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Harrison, K
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Harrison, K
xsltValueOf: result 'Harrison, K'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Engineering
xsltValueOf: result 'Engineering'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-006
xsltValueOf: result '10.5170/CERN-1974-006'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400006
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 170461
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92317
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92317
xsltValueOf: result '92317'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186192
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186192
xsltCopyTextString: copy text 2014-12-15T22:32:45Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186192
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Calcul numérique des dérivées partielles successives des fonctions de deux et de trois variables
xsltValueOf: result 'Calcul numérique des dérivées partielles successives des fonctions de deux et de trois variables'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Barthelemy, Jean Fran#C3#A7ois
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Barthelemy, Jean François
xsltValueOf: result 'Barthelemy, Jean François'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Mathematical Physics and Mathematics
xsltValueOf: result 'Mathematical Physics and Mathematics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-007
xsltValueOf: result '10.5170/CERN-1974-007'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400007
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 171948
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92389
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92389
xsltValueOf: result '92389'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186199
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=PROCEEDINGS
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186200
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=PROCEEDINGS
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186201
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=PROCEEDINGS
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186202
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186202
xsltCopyTextString: copy text 2014-12-15T22:32:48Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186202
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text On preconditioning and convergence acceleration in sparse matrix problems
xsltValueOf: result 'On preconditioning and convergence acceleration in sparse matrix problems'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Axelsson, O
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Axelsson, O
xsltValueOf: result 'Axelsson, O'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Particle Physics
xsltValueOf: result 'Particle Physics'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-010
xsltValueOf: result '10.5170/CERN-1974-010'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097637CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400011
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92460
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92460
xsltValueOf: result '92460'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186203
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186203
xsltCopyTextString: copy text 2014-12-15T22:32:48Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186203
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Dynamic orientation of nuclei at low temperatures
xsltValueOf: result 'Dynamic orientation of nuclei at low temperatures'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=de Boer, Wim
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text de Boer, Wim
xsltValueOf: result 'de Boer, Wim'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-011
xsltValueOf: result '10.5170/CERN-1974-011'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097638CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400012
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 89790
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 89790
xsltValueOf: result '89790'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186204
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186204
xsltCopyTextString: copy text 2014-12-15T22:32:48Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186204
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text A general-purpose amplifier and read-out system for multiwire proportional chambers
xsltValueOf: result 'A general-purpose amplifier and read-out system for multiwire proportional chambers'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 5 nodes:
1  TEXT
    content=Lindsay, John B
2  TEXT
    content=Millerin, Claude
3  TEXT
    content=Tarl#C3#A9, Jean Claude
4  TEXT
    content=Verweij, Hendrik
5  TEXT
    content=Wendler, Helmut
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 5 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Lindsay, John B
xsltValueOf: result 'Lindsay, John B'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Millerin, Claude
xsltValueOf: result 'Millerin, Claude'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Tarlé, Jean Claude
xsltValueOf: result 'Tarlé, Jean Claude'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Verweij, Hendrik
xsltValueOf: result 'Verweij, Hendrik'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Wendler, Helmut
xsltValueOf: result 'Wendler, Helmut'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Detectors and Experimental Techniques
xsltValueOf: result 'Detectors and Experimental Techniques'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-012
xsltValueOf: result '10.5170/CERN-1974-012'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 5 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097639CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SLAC
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 41890
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400013
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=SPIRES
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 41890
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 89946
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 89946
xsltValueOf: result '89946'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186205
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186205
xsltCopyTextString: copy text 2014-12-15T22:32:50Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186205
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Dipole septum magnets
xsltValueOf: result 'Dipole septum magnets'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Keizer, Reinder L
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 1 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Keizer, Reinder L
xsltValueOf: result 'Keizer, Reinder L'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-013
xsltValueOf: result '10.5170/CERN-1974-013'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097640CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400157
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92459
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92459
xsltValueOf: result '92459'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186206
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=BOOK
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node record
xsltCopyOf: select ./oai:header
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186206
xsltCopyTextString: copy text 2014-12-15T22:32:50Z
xsltCopyTextString: copy text DOI
xsltCopyTextString: copy text cerncds:REPORT
xsltCopyTextString: copy text cerncds:FULLTEXT
xsltApplySequenceConstructor: copy node metadata
xsltApplySequenceConstructor: copy node registryObjects
xsltApplySequenceConstructor: copy node registryObject
xsltValueOf: select $global_group
Lookup variable 'global_group'
found variable 'global_group'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node key
xsltCopyOf: select $recordKey
Lookup variable 'recordKey'
xsltCopyOf: result is a node set
xsltCopyTextString: copy text oai:cds.cern.ch:186206
xsltApplySequenceConstructor: copy node originatingSource
xsltValueOf: select $originatingSource
Lookup variable 'originatingSource'
found variable 'originatingSource'
xsltCopyTextString: copy text CERN
xsltValueOf: result 'CERN'
xsltApplySequenceConstructor: copy node collection
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='245']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node namePart
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Numerical computation of field distribution and frequency in the lower passbands of a symmetrical periodic structure
xsltValueOf: result 'Numerical computation of field distribution and frequency in the lower passbands of a symmetrical periodic structure'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'marc:record' for record
Registering variable 'abstract'
Building variable abstract select ./marc:datafield[@tag='520']/marc:subfield[@code='a']/text()
Evaluating variable 'abstract'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'authors'
Building variable authors select ./marc:datafield[@tag='100' or @tag='700']/marc:subfield[@code='a']/text()
Evaluating variable 'authors'
Object is a Node Set :
Set contains 2 nodes:
1  TEXT
    content=Bell, Mary
2  TEXT
    content=D#C3#B4me, Georges
xsltIf: test $abstract or $authors
Lookup variable 'abstract'
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node description
xsltIf: test $abstract
Lookup variable 'abstract'
xsltIf: test evaluate to 0
xsltIf: test $authors
Lookup variable 'authors'
xsltIf: test evaluate to 1
xsltForEach: select $authors
Lookup variable 'authors'
xsltForEach: select evaluates to 2 nodes
xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Bell, Mary
xsltValueOf: result 'Bell, Mary'
xsltIf: test position() < last()
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy text 

xsltCopyText: copy text 

xsltApplySequenceConstructor: copy text Author: 
xsltCopyText: copy text Author: 
xsltValueOf: select .
xsltCopyTextString: copy text Dôme, Georges
xsltValueOf: result 'Dôme, Georges'
xsltIf: test position() < last()
xsltIf: test evaluate to 0
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='653' and @ind1='1']/marc:subfield[@code='a']/text()
xsltApplyTemplates: select didn't evaluate to a node list
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='650' and @ind1='1' and @ind2='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node subject
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text Accelerators and Storage Rings
xsltValueOf: result 'Accelerators and Storage Rings'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='024' and @ind1='7']/marc:subfield[@code='a']/text()
xsltApplyTemplates: list of 1 nodes
xsltProcessOneNode: applying template 'node()' for text
xsltApplySequenceConstructor: copy node identifier
xsltValueOf: select normalize-space(.)
xsltCopyTextString: copy text 10.5170/CERN-1974-014
xsltValueOf: result '10.5170/CERN-1974-014'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='0']
xsltApplyTemplates: list of 0 nodes
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='035']
xsltApplyTemplates: list of 3 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
NodeSet is NULL !
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 0097641CERCER
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=KEK
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 197400014
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'type'
Building variable type select ./marc:subfield[@code='9']/text()
Evaluating variable 'type'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=Inspire
Registering variable 'id'
Building variable id select normalize-space(./marc:subfield[@code='a']/text())
Evaluating variable 'id'
Object is a string : 92605
xsltIf: test $type='Inspire' and $id != ''
Lookup variable 'type'
Lookup variable 'id'
xsltIf: test evaluate to 1
xsltApplySequenceConstructor: copy node location
xsltApplySequenceConstructor: copy node address
xsltApplySequenceConstructor: copy node electronic
xsltApplySequenceConstructor: copy node value
xsltApplySequenceConstructor: copy text http://inspirehep.net/record/
xsltCopyText: copy text http://inspirehep.net/record/
xsltValueOf: select $id
Lookup variable 'id'
xsltCopyTextString: copy text 92605
xsltValueOf: result '92605'
xsltApplyTemplates: node: 'record'
xsltApplyTemplates: select .//marc:record/marc:datafield[@tag='856' and @ind1='4']
xsltApplyTemplates: list of 2 nodes
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'marc:datafield' for datafield
Registering variable 'email'
Building variable email select normalize-space(./marc:subfield[@code='f']/text())
Evaluating variable 'email'
Object is a string : 
xsltIf: test $email != ''
Lookup variable 'email'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186207
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186208
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=ACAD
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
xsltProcessOneNode: applying template 'oai:record' for record
Registering variable 'recordKey'
Building variable recordKey select ./oai:header/oai:identifier/text()
Evaluating variable 'recordKey'
Object is a Node Set :
Set contains 1 nodes:
1  TEXT
    content=oai:cds.cern.ch:186209
Registering variable 'recordType'
Building variable recordType select .//marc:record/marc:datafield[@tag='980']/marc:subfield[@code='a']/text()
Evaluating variable 'recordType'
Object is a Node Set :
NodeSet is NULL !
xsltIf: test boolean($recordType = 'ARTICLE') or boolean($recordType = 'BOOK')
Lookup variable 'recordType'
Lookup variable 'recordType'
xsltIf: test evaluate to 0
freeing transformation dictionary
freeing dictionary from stylesheet
